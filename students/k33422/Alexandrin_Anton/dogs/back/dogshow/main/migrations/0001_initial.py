# Generated by Django 3.2.9 on 2021-11-30 22:00

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Club',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Expert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('club', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Medal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('medal', models.CharField(choices=[('g', 'gold'), ('s', 'silver'), ('b', 'bronze')], max_length=1)),
            ],
        ),
        migrations.CreateModel(
            name='Participant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('breed', models.CharField(choices=[('b', 'bulldog'), ('p', 'poodle'), ('r', 'retriever')], max_length=1)),
                ('age', models.IntegerField()),
                ('family', models.CharField(max_length=1000)),
                ('vaccinated', models.DateField()),
                ('owner_data', models.CharField(max_length=1000)),
                ('dismissed', models.BooleanField()),
                ('club', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.club')),
                ('medals', models.ManyToManyField(blank=True, null=True, to='main.Medal')),
            ],
        ),
        migrations.CreateModel(
            name='Show',
            fields=[
                ('year', models.IntegerField(primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('mono', 'mono-breed'), ('poly', 'poly-breed')], max_length=4)),
                ('participants', models.ManyToManyField(related_name='show_participants', to='main.Participant')),
            ],
        ),
        migrations.CreateModel(
            name='Ring',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('breed', models.CharField(choices=[('b', 'bulldog'), ('p', 'poodle'), ('r', 'retriever')], max_length=1)),
                ('experts', models.ManyToManyField(blank=True, null=True, related_name='ring_experts', to='main.Expert')),
                ('show', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.show')),
            ],
        ),
        migrations.CreateModel(
            name='Participation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('participant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.participant')),
                ('show', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.show')),
            ],
        ),
        migrations.AddField(
            model_name='participant',
            name='rings',
            field=models.ManyToManyField(blank=True, null=True, to='main.Ring'),
        ),
        migrations.CreateModel(
            name='Grade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('final_grade', models.IntegerField(blank=True, null=True)),
                ('expert', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.expert')),
                ('participant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.participant')),
                ('ring', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.ring')),
            ],
        ),
        migrations.AddField(
            model_name='expert',
            name='ring',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.ring'),
        ),
        migrations.AddField(
            model_name='club',
            name='members',
            field=models.ManyToManyField(related_name='club_members', to='main.Participant'),
        ),
        migrations.CreateModel(
            name='Organizer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
