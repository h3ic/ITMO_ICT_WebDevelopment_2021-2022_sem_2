{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"breed_experts/","text":"Shows info about which breeds are judged by an expert Shows info about which breeds are judged by an expert URL : /breed_experts/ Method : GET Auth required : NO Permissions required : None Data constraints : {} Success Responses Code : 200 OK Content : [] [ { \"breed\": \"r\", \"experts\": [ { \"id\": 1, \"name\": \"Juan\", \"last_name\": \"Andreev\", \"club\": \"Hunt\", \"ring\": null }, { \"id\": 2, \"name\": \"Anton\", \"last_name\": \"Antonov\", \"club\": \"Hunt\", \"ring\": 1 } ] } ]","title":"/breed_experts/"},{"location":"breed_experts/#shows-info-about-which-breeds-are-judged-by-an-expert","text":"Shows info about which breeds are judged by an expert URL : /breed_experts/ Method : GET Auth required : NO Permissions required : None Data constraints : {}","title":"Shows info about which breeds are judged by an expert"},{"location":"breed_experts/#success-responses","text":"Code : 200 OK Content : [] [ { \"breed\": \"r\", \"experts\": [ { \"id\": 1, \"name\": \"Juan\", \"last_name\": \"Andreev\", \"club\": \"Hunt\", \"ring\": null }, { \"id\": 2, \"name\": \"Anton\", \"last_name\": \"Antonov\", \"club\": \"Hunt\", \"ring\": 1 } ] } ]","title":"Success Responses"},{"location":"breeds_count/","text":"Show breed counts Shows how many dogs of each breed there is URL : /breeds_count/ Method : GET Auth required : NO Permissions required : None Data constraints : {} Success Responses Code : 200 OK Content : {} json { \"breed_count\": [ { \"breed\": \"p\", \"count\": 1 }, { \"breed\": \"r\", \"count\": 3 } ] }","title":"Show breed counts"},{"location":"breeds_count/#show-breed-counts","text":"Shows how many dogs of each breed there is URL : /breeds_count/ Method : GET Auth required : NO Permissions required : None Data constraints : {}","title":"Show breed counts"},{"location":"breeds_count/#success-responses","text":"Code : 200 OK Content : {} json { \"breed_count\": [ { \"breed\": \"p\", \"count\": 1 }, { \"breed\": \"r\", \"count\": 3 } ] }","title":"Success Responses"},{"location":"club_breeds/","text":"Show breeds of members of a specified club Shows breeds of members of a specified club URL : /club_breeds/<id> Method : GET Auth required : NO Permissions required : None Data constraints : {} Success Responses Code : 200 OK Content : {} json { \"name\": \"Royal\", \"members\": [ { \"breed\": \"r\" } ] }}","title":"/club_breeds/<id>"},{"location":"club_breeds/#show-breeds-of-members-of-a-specified-club","text":"Shows breeds of members of a specified club URL : /club_breeds/<id> Method : GET Auth required : NO Permissions required : None Data constraints : {}","title":"Show breeds of members of a specified club"},{"location":"club_breeds/#success-responses","text":"Code : 200 OK Content : {} json { \"name\": \"Royal\", \"members\": [ { \"breed\": \"r\" } ] }}","title":"Success Responses"},{"location":"description/","text":"\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443, \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u0443\u044e \u0434\u043b\u044f \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u043e\u0432 \u0435\u0436\u0435\u0433\u043e\u0434\u043d\u044b\u0445 \u0432\u044b\u0441\u0442\u0430\u0432\u043e\u043a \u0441\u043e\u0431\u0430\u043a. \u0412\u044b\u0441\u0442\u0430\u0432\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043c\u043e\u043d\u043e- \u0438 \u043f\u043e\u043b\u0438\u043f\u043e\u0440\u043e\u0434\u043d\u044b\u0435. \u041e\u043d\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0442\u044c \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0441\u043e\u0431\u0430\u043a\u0430\u0445 - \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u0445 \u0432\u044b\u0441\u0442\u0430\u0432\u043e\u043a \u0438 \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430\u0445. \u0423\u0447\u0430\u0441\u0442\u0438\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0438\u043d\u0434\u0438\u0432\u0438\u0434\u0443\u0430\u043b\u044c\u043d\u044b\u043c \u0438\u043b\u0438 \u043e\u0442 \u043a\u043b\u0443\u0431\u0430. \u0423 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0441\u043f\u043e\u043d\u0441\u043e\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u0441\u043f\u043e\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u043e\u0431\u0430\u043a\u0438 \u0432 \u0411\u0414 \u0434\u043e\u043b\u0436\u043d\u044b \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f, \u043e \u0442\u043e\u043c, \u043a \u043a\u0430\u043a\u043e\u043c\u0443 \u043a\u043b\u0443\u0431\u0443 \u043e\u043d\u0430 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f, \u043a\u043b\u0438\u0447\u043a\u0430, \u043f\u043e\u0440\u043e\u0434\u0430 \u0438 \u0432\u043e\u0437\u0440\u0430\u0441\u0442, \u043a\u043b\u0430\u0441\u0441\u043d\u043e\u0441\u0442\u044c, \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0440\u043e\u0434\u043e\u0441\u043b\u043e\u0432\u043d\u043e\u0439 (\u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430, \u043a\u043b\u0438\u0447\u043a\u0438 \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439), \u0434\u0430\u0442\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u043f\u0440\u0438\u0432\u0438\u0432\u043a\u0438, \u0444\u0430\u043c\u0438\u043b\u0438\u044f, \u0438\u043c\u044f, \u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e \u0438 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0445\u043e\u0437\u044f\u0438\u043d\u0430. \u041f\u0435\u0440\u0435\u0434 \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u044f\u043c\u0438 \u0441\u043e\u0431\u0430\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u043e\u0439\u0442\u0438 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043c\u0435\u0434\u043e\u0441\u043c\u043e\u0442\u0440. \u0422.\u043a. \u0443\u0447\u0430\u0441\u0442\u0438\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u043b\u0430\u0442\u043d\u044b\u043c, \u0442\u043e \u0445\u043e\u0437\u044f\u0438\u043d \u043e\u0431\u044f\u0437\u0430\u043d \u043f\u043e\u0441\u043b\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0434\u043e \u043f\u0440\u043e\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u043c\u0435\u0434\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0434\u043e\u043b\u0436\u0435\u043d \u043e\u043f\u043b\u0430\u0442\u0438\u0442\u044c \u0441\u0447\u0435\u0442 \u0438 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0435\u0433\u043e \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u0430\u043c. \u0421\u043e\u0431\u0430\u043a\u0430 \u0434\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u0434\u043e \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0439, \u0435\u0441\u043b\u0438 \u043e\u043d\u0430 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u043f\u0440\u043e\u0448\u043b\u0430 \u043c\u0435\u0434\u043e\u0441\u043c\u043e\u0442\u0440. \u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e\u0431 \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0444\u0430\u043c\u0438\u043b\u0438\u044e \u0438 \u0438\u043c\u044f, \u043d\u043e\u043c\u0435\u0440 \u0440\u0438\u043d\u0433\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u043d \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u0435\u0442, \u043a\u043b\u0443\u0431, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043b\u0443\u0431\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043e\u043d \u0441\u043e\u0441\u0442\u043e\u0438\u0442. \u041a\u0430\u0436\u0434\u044b\u0439 \u0440\u0438\u043d\u0433 \u043c\u043e\u0433\u0443\u0442 \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u043e\u0432. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u043e\u0440\u043e\u0434\u0430 \u0441\u043e\u0431\u0430\u043a \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0435\u0442 \u043d\u0430 \u0441\u0432\u043e\u0435\u043c \u0440\u0438\u043d\u0433\u0435, \u043d\u043e \u043d\u0430 \u043e\u0434\u043d\u043e\u043c \u0438 \u0442\u043e\u043c \u0436\u0435 \u0440\u0438\u043d\u0433\u0435 \u0432 \u0440\u0430\u0437\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u043c\u043e\u0433\u0443\u0442 \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u043f\u043e\u0440\u043e\u0434\u044b. \u041a\u0430\u0436\u0434\u0430\u044f \u0441\u043e\u0431\u0430\u043a\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c 3 \u0443\u043f\u0440\u0430\u0436\u043d\u0435\u043d\u0438\u044f, \u0437\u0430 \u043a\u0430\u0436\u0434\u043e\u0435 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043e\u043d\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0431\u0430\u043b\u043b\u044b \u043e\u0442 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430. \u0418\u0442\u043e\u0433\u043e\u043c \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043c\u0435\u0434\u0430\u043b\u0438\u0441\u0442\u043e\u0432 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u043e\u0440\u043e\u0434\u0435 \u043f\u043e \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u043c\u0443 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0443. \u041e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 \u0431\u0430\u0437\u0443 \u043d\u043e\u0432\u043e\u0433\u043e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430 \u0438\u043b\u0438 \u043d\u043e\u0432\u043e\u0433\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430, \u0441\u043d\u044f\u0442\u044c \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430 \u0441 \u0441\u0443\u0434\u0435\u0439\u0441\u0442\u0432\u0430, \u0437\u0430\u043c\u0435\u043d\u0438\u0432 \u0435\u0433\u043e \u0434\u0440\u0443\u0433\u0438\u043c, \u043e\u0442\u0441\u0442\u0440\u0430\u043d\u0438\u0442\u044c \u0441\u043e\u0431\u0430\u043a\u0443 \u043e\u0442 \u0443\u0447\u0430\u0441\u0442\u0438\u044f \u0432 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0435. \u041e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u0443 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u043e\u0442\u0440\u0435\u0431\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f; \uf0b7 \u041d\u0430 \u043a\u0430\u043a\u043e\u043c \u0440\u0438\u043d\u0433\u0435 \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0435\u0442 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u0445\u043e\u0437\u044f\u0438\u043d \u0441\u043e \u0441\u0432\u043e\u0435\u0439 \u0441\u043e\u0431\u0430\u043a\u043e\u0439? \uf0b7 \u041a\u0430\u043a\u0438\u043c\u0438 \u043f\u043e\u0440\u043e\u0434\u0430\u043c\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u043a\u043b\u0443\u0431? \uf0b7 \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043e\u0431\u0430\u043a \u0431\u044b\u043b\u0438 \u043e\u0442\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u044b \u043e\u0442 \u0443\u0447\u0430\u0441\u0442\u0438\u044f \u0432 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0435? \uf0b7 \u041a\u0430\u043a\u0438\u0435 \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u044b \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u044e\u0442 \u043f\u043e\u0440\u043e\u0434\u0443? \uf0b7 \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u043e\u0440\u043e\u0434\u0435? \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0440\u0435\u0434\u0443\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0434\u0430\u0447\u0438 \u043e\u0442\u0447\u0435\u0442\u0430 \u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u0445 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0439 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438 (\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0441\u0435\u0433\u043e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432, \u043a\u0430\u043a\u0438\u0435 \u043f\u043e\u0440\u043e\u0434\u044b, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043c\u0435\u0434\u0430\u043b\u0435\u0439 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u043e\u0440\u043e\u0434\u0435).","title":"Description"},{"location":"dismissed_count/","text":"Shows number of dismissed participants for the specified year Show number of dismissed participants for the specified year URL : /dismissed_count/id Method : GET Auth required : NO Permissions required : None Data constraints : {} Success Responses Code : 200 OK Content : {} { \"year\": 2021, \"dismissed_count\": 2 }","title":"/dismissed_count/<id>"},{"location":"dismissed_count/#shows-number-of-dismissed-participants-for-the-specified-year","text":"Show number of dismissed participants for the specified year URL : /dismissed_count/id Method : GET Auth required : NO Permissions required : None Data constraints : {}","title":"Shows number of dismissed participants for the specified year"},{"location":"dismissed_count/#success-responses","text":"Code : 200 OK Content : {} { \"year\": 2021, \"dismissed_count\": 2 }","title":"Success Responses"},{"location":"experts/","text":"Show, delete and replace an expert Shows info about an expert URL : /experts/<id> Method : GET PUT PATCH Auth required : NO Permissions required : None Data constraints : {} Success Responses Code : 200 OK Content : {} json { \"id\": 1, \"name\": \"Juan\", \"last_name\": \"Andreev\", \"club\": \"Hunt\", \"ring_field\": 1 }","title":"experts/<id>"},{"location":"experts/#show-delete-and-replace-an-expert","text":"Shows info about an expert URL : /experts/<id> Method : GET PUT PATCH Auth required : NO Permissions required : None Data constraints : {}","title":"Show, delete and replace an expert"},{"location":"experts/#success-responses","text":"Code : 200 OK Content : {} json { \"id\": 1, \"name\": \"Juan\", \"last_name\": \"Andreev\", \"club\": \"Hunt\", \"ring_field\": 1 }","title":"Success Responses"},{"location":"participant_ring/","text":"Show which rings the participant was on Shows which rings the participant was on URL : /participant_ring/<id> Method : GET Auth required : NO Permissions required : None Data constraints : {} Success Responses Code : 200 OK Content : {} json { \"rings\": [ 1 ] }","title":"/participant_ring/<id>"},{"location":"participant_ring/#show-which-rings-the-participant-was-on","text":"Shows which rings the participant was on URL : /participant_ring/<id> Method : GET Auth required : NO Permissions required : None Data constraints : {}","title":"Show which rings the participant was on"},{"location":"participant_ring/#success-responses","text":"Code : 200 OK Content : {} json { \"rings\": [ 1 ] }","title":"Success Responses"},{"location":"participants/","text":"Show, delete and replace a participant Shows info about a participant URL : /participants/<id> Method : GET PUT PATCH Auth required : NO Permissions required : None Data constraints : {} Success Responses Code : 200 OK Content : {} json { \"id\": 1, \"name\": \"Rex\", \"breed\": \"r\", \"age\": 5, \"family\": \"Rex's parents\", \"vaccinated\": \"2021-11-30\", \"owner_data\": \"Owner\", \"dismissed\": false, \"club\": null, \"rings\": [ 1, 1 ], \"medals\": [ 1 ] }","title":"/participants/<id>"},{"location":"participants/#show-delete-and-replace-a-participant","text":"Shows info about a participant URL : /participants/<id> Method : GET PUT PATCH Auth required : NO Permissions required : None Data constraints : {}","title":"Show, delete and replace a participant"},{"location":"participants/#success-responses","text":"Code : 200 OK Content : {} json { \"id\": 1, \"name\": \"Rex\", \"breed\": \"r\", \"age\": 5, \"family\": \"Rex's parents\", \"vaccinated\": \"2021-11-30\", \"owner_data\": \"Owner\", \"dismissed\": false, \"club\": null, \"rings\": [ 1, 1 ], \"medals\": [ 1 ] }","title":"Success Responses"},{"location":"report/","text":"View a report for the specified show Creates a report URL : /report/<year> Method : GET Auth required : NO Permissions required : None Data constraints : {} Success Responses Code : 200 OK Content : {} json { \"participant_count\": 3, \"breeds\": [ { \"breed\": \"p\", \"count\": 1 }, { \"breed\": \"r\", \"count\": 2 } ], \"best_grades\": [ { \"participant\": 1, \"ex_sum\": 30 }, { \"participant\": 2, \"ex_sum\": 27 }, { \"participant\": 4, \"ex_sum\": 31 } ], \"medals\": [ { \"breed\": \"p\", \"medals_count\": 1 }, { \"breed\": \"r\", \"medals_count\": 3 } ] }","title":"/report/<year>"},{"location":"report/#view-a-report-for-the-specified-show","text":"Creates a report URL : /report/<year> Method : GET Auth required : NO Permissions required : None Data constraints : {}","title":"View a report for the specified show"},{"location":"report/#success-responses","text":"Code : 200 OK Content : {} json { \"participant_count\": 3, \"breeds\": [ { \"breed\": \"p\", \"count\": 1 }, { \"breed\": \"r\", \"count\": 2 } ], \"best_grades\": [ { \"participant\": 1, \"ex_sum\": 30 }, { \"participant\": 2, \"ex_sum\": 27 }, { \"participant\": 4, \"ex_sum\": 31 } ], \"medals\": [ { \"breed\": \"p\", \"medals_count\": 1 }, { \"breed\": \"r\", \"medals_count\": 3 } ] }","title":"Success Responses"},{"location":"semester2/kursach/concl/","text":"\u0412 \u0445\u043e\u0434\u0435 \u043f\u0440\u043e\u0434\u0435\u043b\u0430\u043d\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u044b \u043d\u0430\u0432\u044b\u043a\u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 Docker, \u0438\u0437\u0443\u0447\u0435\u043d\u044b \u043c\u0435\u0442\u043e\u0434\u044b \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u0438 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Django \u0438 DRF. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0444\u0430\u0439\u043b\u043e\u0432, \u0441\u0438\u0433\u043d\u0430\u043b\u044b, \u0438\u0437\u0443\u0447\u0435\u043d\u044b \u043c\u0435\u0442\u043e\u0434\u044b \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432, \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432.","title":"\u0412\u044b\u0432\u043e\u0434\u044b"},{"location":"semester2/kursach/concl/#_1","text":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u044b \u043d\u0430\u0432\u044b\u043a\u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 Docker, \u0438\u0437\u0443\u0447\u0435\u043d\u044b \u043c\u0435\u0442\u043e\u0434\u044b \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u0438 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Django \u0438 DRF. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0444\u0430\u0439\u043b\u043e\u0432, \u0441\u0438\u0433\u043d\u0430\u043b\u044b, \u0438\u0437\u0443\u0447\u0435\u043d\u044b \u043c\u0435\u0442\u043e\u0434\u044b \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432, \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432.","title":"\u0412 \u0445\u043e\u0434\u0435 \u043f\u0440\u043e\u0434\u0435\u043b\u0430\u043d\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"semester2/kursach/intro/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0441\u0435\u0440\u0432\u0438\u0441\u0430: \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443, \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u0443\u044e \u0434\u043b\u044f \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u043e\u0432 \u0435\u0436\u0435\u0433\u043e\u0434\u043d\u044b\u0445 \u0432\u044b\u0441\u0442\u0430\u0432\u043e\u043a \u0441\u043e\u0431\u0430\u043a. \u0412\u044b\u0441\u0442\u0430\u0432\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043c\u043e\u043d\u043e- \u0438 \u043f\u043e\u043b\u0438\u043f\u043e\u0440\u043e\u0434\u043d\u044b\u0435. \u041e\u043d\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0442\u044c \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0441\u043e\u0431\u0430\u043a\u0430\u0445 - \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u0445 \u0432\u044b\u0441\u0442\u0430\u0432\u043e\u043a \u0438 \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430\u0445. \u0423\u0447\u0430\u0441\u0442\u0438\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0438\u043d\u0434\u0438\u0432\u0438\u0434\u0443\u0430\u043b\u044c\u043d\u044b\u043c \u0438\u043b\u0438 \u043e\u0442 \u043a\u043b\u0443\u0431\u0430. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u043e\u0431\u0430\u043a\u0438 \u0432 \u0411\u0414 \u0434\u043e\u043b\u0436\u043d\u044b \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f, \u043e \u0442\u043e\u043c, \u043a \u043a\u0430\u043a\u043e\u043c\u0443 \u043a\u043b\u0443\u0431\u0443 \u043e\u043d\u0430 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f, \u043a\u043b\u0438\u0447\u043a\u0430, \u043f\u043e\u0440\u043e\u0434\u0430 \u0438 \u0432\u043e\u0437\u0440\u0430\u0441\u0442, \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0440\u043e\u0434\u043e\u0441\u043b\u043e\u0432\u043d\u043e\u0439 (\u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430, \u043a\u043b\u0438\u0447\u043a\u0438 \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439), \u0434\u0430\u0442\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u043f\u0440\u0438\u0432\u0438\u0432\u043a\u0438, \u0444\u0430\u043c\u0438\u043b\u0438\u044f, \u0438\u043c\u044f, \u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e \u0438 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0445\u043e\u0437\u044f\u0438\u043d\u0430. \u041f\u0435\u0440\u0435\u0434 \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u044f\u043c\u0438 \u0441\u043e\u0431\u0430\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u043e\u0439\u0442\u0438 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043c\u0435\u0434\u043e\u0441\u043c\u043e\u0442\u0440. \u0421\u043e\u0431\u0430\u043a\u0430 \u0434\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u0434\u043e \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0439, \u0435\u0441\u043b\u0438 \u043e\u043d\u0430 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u043f\u0440\u043e\u0448\u043b\u0430 \u043c\u0435\u0434\u043e\u0441\u043c\u043e\u0442\u0440. \u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e\u0431 \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0444\u0430\u043c\u0438\u043b\u0438\u044e \u0438 \u0438\u043c\u044f, \u043d\u043e\u043c\u0435\u0440 \u0440\u0438\u043d\u0433\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u043d \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u0435\u0442, \u043a\u043b\u0443\u0431, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043b\u0443\u0431\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043e\u043d \u0441\u043e\u0441\u0442\u043e\u0438\u0442. \u041a\u0430\u0436\u0434\u044b\u0439 \u0440\u0438\u043d\u0433 \u043c\u043e\u0433\u0443\u0442 \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u043e\u0432. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u043e\u0440\u043e\u0434\u0430 \u0441\u043e\u0431\u0430\u043a \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0435\u0442 \u043d\u0430 \u0441\u0432\u043e\u0435\u043c \u0440\u0438\u043d\u0433\u0435, \u043d\u043e \u043d\u0430 \u043e\u0434\u043d\u043e\u043c \u0438 \u0442\u043e\u043c \u0436\u0435 \u0440\u0438\u043d\u0433\u0435 \u0432 \u0440\u0430\u0437\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u043c\u043e\u0433\u0443\u0442 \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u043f\u043e\u0440\u043e\u0434\u044b. \u041a\u0430\u0436\u0434\u0430\u044f \u0441\u043e\u0431\u0430\u043a\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c 3 \u0443\u043f\u0440\u0430\u0436\u043d\u0435\u043d\u0438\u044f, \u0437\u0430 \u043a\u0430\u0436\u0434\u043e\u0435 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043e\u043d\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0431\u0430\u043b\u043b\u044b \u043e\u0442 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430. \u0418\u0442\u043e\u0433\u043e\u043c \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043c\u0435\u0434\u0430\u043b\u0438\u0441\u0442\u043e\u0432 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u043e\u0440\u043e\u0434\u0435 \u043f\u043e \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u043c\u0443 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0443. \u041e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u0443 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u043e\u0442\u0440\u0435\u0431\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f; \u041d\u0430 \u043a\u0430\u043a\u043e\u043c \u0440\u0438\u043d\u0433\u0435 \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0435\u0442 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u0445\u043e\u0437\u044f\u0438\u043d \u0441\u043e \u0441\u0432\u043e\u0435\u0439 \u0441\u043e\u0431\u0430\u043a\u043e\u0439? \u041a\u0430\u043a\u0438\u043c\u0438 \u043f\u043e\u0440\u043e\u0434\u0430\u043c\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u043a\u043b\u0443\u0431? \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043e\u0431\u0430\u043a \u0431\u044b\u043b\u0438 \u043e\u0442\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u044b \u043e\u0442 \u0443\u0447\u0430\u0441\u0442\u0438\u044f \u0432 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0435? \u041a\u0430\u043a\u0438\u0435 \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u044b \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u044e\u0442 \u043f\u043e\u0440\u043e\u0434\u0443? \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u043e\u0440\u043e\u0434\u0435? \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0440\u0435\u0434\u0443\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0434\u0430\u0447\u0438 \u043e\u0442\u0447\u0435\u0442\u0430 \u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u0445 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0439 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438 (\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0441\u0435\u0433\u043e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432, \u043a\u0430\u043a\u0438\u0435 \u043f\u043e\u0440\u043e\u0434\u044b, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043c\u0435\u0434\u0430\u043b\u0435\u0439 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u043e\u0440\u043e\u0434\u0435). \u0426\u0435\u043b\u0438 \u0440\u0430\u0431\u043e\u0442\u044b: \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043d\u0430\u0432\u044b\u043a\u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 Docker, \u0438\u0437\u0443\u0447\u0438\u0442\u044c \u043c\u0435\u0442\u043e\u0434\u044b \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u0438 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Django \u0438 DRF. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0443 \u0444\u0430\u0439\u043b\u043e\u0432, \u0441\u0438\u0433\u043d\u0430\u043b\u044b, \u0438\u0437\u0443\u0447\u0438\u0442\u044c \u043c\u0435\u0442\u043e\u0434\u044b \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432, \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432.","title":"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435"},{"location":"semester2/kursach/intro/#_1","text":"\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443, \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u0443\u044e \u0434\u043b\u044f \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u043e\u0432 \u0435\u0436\u0435\u0433\u043e\u0434\u043d\u044b\u0445 \u0432\u044b\u0441\u0442\u0430\u0432\u043e\u043a \u0441\u043e\u0431\u0430\u043a. \u0412\u044b\u0441\u0442\u0430\u0432\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043c\u043e\u043d\u043e- \u0438 \u043f\u043e\u043b\u0438\u043f\u043e\u0440\u043e\u0434\u043d\u044b\u0435. \u041e\u043d\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0442\u044c \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0441\u043e\u0431\u0430\u043a\u0430\u0445 - \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u0445 \u0432\u044b\u0441\u0442\u0430\u0432\u043e\u043a \u0438 \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430\u0445. \u0423\u0447\u0430\u0441\u0442\u0438\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0438\u043d\u0434\u0438\u0432\u0438\u0434\u0443\u0430\u043b\u044c\u043d\u044b\u043c \u0438\u043b\u0438 \u043e\u0442 \u043a\u043b\u0443\u0431\u0430. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u043e\u0431\u0430\u043a\u0438 \u0432 \u0411\u0414 \u0434\u043e\u043b\u0436\u043d\u044b \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f, \u043e \u0442\u043e\u043c, \u043a \u043a\u0430\u043a\u043e\u043c\u0443 \u043a\u043b\u0443\u0431\u0443 \u043e\u043d\u0430 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f, \u043a\u043b\u0438\u0447\u043a\u0430, \u043f\u043e\u0440\u043e\u0434\u0430 \u0438 \u0432\u043e\u0437\u0440\u0430\u0441\u0442, \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0440\u043e\u0434\u043e\u0441\u043b\u043e\u0432\u043d\u043e\u0439 (\u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430, \u043a\u043b\u0438\u0447\u043a\u0438 \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439), \u0434\u0430\u0442\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u043f\u0440\u0438\u0432\u0438\u0432\u043a\u0438, \u0444\u0430\u043c\u0438\u043b\u0438\u044f, \u0438\u043c\u044f, \u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e \u0438 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0445\u043e\u0437\u044f\u0438\u043d\u0430. \u041f\u0435\u0440\u0435\u0434 \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u044f\u043c\u0438 \u0441\u043e\u0431\u0430\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u043e\u0439\u0442\u0438 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043c\u0435\u0434\u043e\u0441\u043c\u043e\u0442\u0440. \u0421\u043e\u0431\u0430\u043a\u0430 \u0434\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u0434\u043e \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0439, \u0435\u0441\u043b\u0438 \u043e\u043d\u0430 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u043f\u0440\u043e\u0448\u043b\u0430 \u043c\u0435\u0434\u043e\u0441\u043c\u043e\u0442\u0440. \u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e\u0431 \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0444\u0430\u043c\u0438\u043b\u0438\u044e \u0438 \u0438\u043c\u044f, \u043d\u043e\u043c\u0435\u0440 \u0440\u0438\u043d\u0433\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u043d \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u0435\u0442, \u043a\u043b\u0443\u0431, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043b\u0443\u0431\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043e\u043d \u0441\u043e\u0441\u0442\u043e\u0438\u0442. \u041a\u0430\u0436\u0434\u044b\u0439 \u0440\u0438\u043d\u0433 \u043c\u043e\u0433\u0443\u0442 \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u043e\u0432. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u043e\u0440\u043e\u0434\u0430 \u0441\u043e\u0431\u0430\u043a \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0435\u0442 \u043d\u0430 \u0441\u0432\u043e\u0435\u043c \u0440\u0438\u043d\u0433\u0435, \u043d\u043e \u043d\u0430 \u043e\u0434\u043d\u043e\u043c \u0438 \u0442\u043e\u043c \u0436\u0435 \u0440\u0438\u043d\u0433\u0435 \u0432 \u0440\u0430\u0437\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u043c\u043e\u0433\u0443\u0442 \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u043f\u043e\u0440\u043e\u0434\u044b. \u041a\u0430\u0436\u0434\u0430\u044f \u0441\u043e\u0431\u0430\u043a\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c 3 \u0443\u043f\u0440\u0430\u0436\u043d\u0435\u043d\u0438\u044f, \u0437\u0430 \u043a\u0430\u0436\u0434\u043e\u0435 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043e\u043d\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0431\u0430\u043b\u043b\u044b \u043e\u0442 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430. \u0418\u0442\u043e\u0433\u043e\u043c \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043c\u0435\u0434\u0430\u043b\u0438\u0441\u0442\u043e\u0432 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u043e\u0440\u043e\u0434\u0435 \u043f\u043e \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u043c\u0443 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0443. \u041e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u0443 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u043e\u0442\u0440\u0435\u0431\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f; \u041d\u0430 \u043a\u0430\u043a\u043e\u043c \u0440\u0438\u043d\u0433\u0435 \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0435\u0442 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u0445\u043e\u0437\u044f\u0438\u043d \u0441\u043e \u0441\u0432\u043e\u0435\u0439 \u0441\u043e\u0431\u0430\u043a\u043e\u0439? \u041a\u0430\u043a\u0438\u043c\u0438 \u043f\u043e\u0440\u043e\u0434\u0430\u043c\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u043a\u043b\u0443\u0431? \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043e\u0431\u0430\u043a \u0431\u044b\u043b\u0438 \u043e\u0442\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u044b \u043e\u0442 \u0443\u0447\u0430\u0441\u0442\u0438\u044f \u0432 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0435? \u041a\u0430\u043a\u0438\u0435 \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u044b \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u044e\u0442 \u043f\u043e\u0440\u043e\u0434\u0443? \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u043e\u0440\u043e\u0434\u0435? \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0440\u0435\u0434\u0443\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0434\u0430\u0447\u0438 \u043e\u0442\u0447\u0435\u0442\u0430 \u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u0445 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0439 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438 (\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0441\u0435\u0433\u043e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432, \u043a\u0430\u043a\u0438\u0435 \u043f\u043e\u0440\u043e\u0434\u044b, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043c\u0435\u0434\u0430\u043b\u0435\u0439 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u043e\u0440\u043e\u0434\u0435).","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0441\u0435\u0440\u0432\u0438\u0441\u0430:"},{"location":"semester2/kursach/intro/#_2","text":"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043d\u0430\u0432\u044b\u043a\u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 Docker, \u0438\u0437\u0443\u0447\u0438\u0442\u044c \u043c\u0435\u0442\u043e\u0434\u044b \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u0438 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Django \u0438 DRF. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0443 \u0444\u0430\u0439\u043b\u043e\u0432, \u0441\u0438\u0433\u043d\u0430\u043b\u044b, \u0438\u0437\u0443\u0447\u0438\u0442\u044c \u043c\u0435\u0442\u043e\u0434\u044b \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432, \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432.","title":"\u0426\u0435\u043b\u0438 \u0440\u0430\u0431\u043e\u0442\u044b:"},{"location":"semester2/kursach/title/","text":"","title":"\u0422\u0438\u0442\u0443\u043b\u044c\u043d\u044b\u0439 \u043b\u0438\u0441\u0442"},{"location":"semester2/lab1/1.1_containerization/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c Dockerfile \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0431\u044d\u043a\u0435\u043d\u0434 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0438\u0437 \u043a\u0443\u0440\u0441\u0430 \"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\". \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f: \u0418\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u0411\u0414 Django \u0417\u0430\u0439\u0442\u0438 \u0432 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 (https://www.mousedc.ru/learning/565-komanda-docker-konteyner/) Backend Dockerfile FROM python:3.8.12 ENV docker_dog_app=/home/h3ic/ITMO_ICT_WebDevelopment_2021-2022_sem_2/students/k33422/Alexandrin_Anton/dogs/back RUN mkdir -p $docker_dog_app/dogshow WORKDIR $docker_dog_app/dogshow COPY . $docker_dog_app RUN pip install --upgrade pip RUN pip install -r requirements.txt EXPOSE 8000 CMD python manage.py runserver 0.0.0.0:8000 Frontend Dockerfile FROM node:lts-alpine ENV docker_dog_app=/home/h3ic/ITMO_ICT_WebDevelopment_2021-2022_sem_2/students/k33422/Alexandrin_Anton/dogs/front/dog_front WORKDIR $docker_dog_app COPY package*.json ./ RUN npm install COPY . . # RUN npm run build EXPOSE 8080 CMD npm run serve \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u043c \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0414\u0436\u0430\u043d\u0433\u043e \u043f\u043e\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u0447\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0432 \u0431\u0430\u0437\u0435. \u0418\u0441\u043f\u0440\u0430\u0432\u0438\u043c \u044d\u0442\u0438 \u043c\u043e\u043c\u0435\u043d\u0442\u044b, \u043f\u0435\u0440\u0435\u0437\u0430\u043f\u0443\u0441\u0442\u0438\u043c \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043c \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438:","title":"1.1 \u041a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"semester2/lab1/1.1_containerization/#_1","text":"\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c Dockerfile \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0431\u044d\u043a\u0435\u043d\u0434 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0438\u0437 \u043a\u0443\u0440\u0441\u0430 \"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\". \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f: \u0418\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u0411\u0414 Django \u0417\u0430\u0439\u0442\u0438 \u0432 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 (https://www.mousedc.ru/learning/565-komanda-docker-konteyner/)","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435:"},{"location":"semester2/lab1/1.1_containerization/#backend-dockerfile","text":"FROM python:3.8.12 ENV docker_dog_app=/home/h3ic/ITMO_ICT_WebDevelopment_2021-2022_sem_2/students/k33422/Alexandrin_Anton/dogs/back RUN mkdir -p $docker_dog_app/dogshow WORKDIR $docker_dog_app/dogshow COPY . $docker_dog_app RUN pip install --upgrade pip RUN pip install -r requirements.txt EXPOSE 8000 CMD python manage.py runserver 0.0.0.0:8000","title":"Backend Dockerfile"},{"location":"semester2/lab1/1.1_containerization/#frontend-dockerfile","text":"FROM node:lts-alpine ENV docker_dog_app=/home/h3ic/ITMO_ICT_WebDevelopment_2021-2022_sem_2/students/k33422/Alexandrin_Anton/dogs/front/dog_front WORKDIR $docker_dog_app COPY package*.json ./ RUN npm install COPY . . # RUN npm run build EXPOSE 8080 CMD npm run serve \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u043c \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0414\u0436\u0430\u043d\u0433\u043e \u043f\u043e\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u0447\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0432 \u0431\u0430\u0437\u0435. \u0418\u0441\u043f\u0440\u0430\u0432\u0438\u043c \u044d\u0442\u0438 \u043c\u043e\u043c\u0435\u043d\u0442\u044b, \u043f\u0435\u0440\u0435\u0437\u0430\u043f\u0443\u0441\u0442\u0438\u043c \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043c \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438:","title":"Frontend Dockerfile"},{"location":"semester2/lab1/1.2_orchestration/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u0432 \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u0435 \u0432\u0441\u0435\u0445 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u0438\u0437 3 \u0438 4 \u0440\u0430\u0431\u043e\u0442\u044b \u0438\u0437 \u043a\u0443\u0440\u0441\u0430 \"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\". \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0411\u0414 Postgres. \u0421 \u043f\u043e\u043f\u043e\u0449\u044c\u044e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043a \u0411\u0414 \u0438\u0437 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0411\u0414 (Valentina DB). Docker-compose file version: '3' services: back: container_name: dogs_back build: ./back command: bash -c \" python3 manage.py makemigrations && python3 manage.py migrate && python3 manage.py runserver 0.0.0.0:8000\"; ports: - '8000:8000' depends_on: - db front: container_name: dogs_front build: ./front/dog_front ports: - '8080:8080' depends_on: - back db: container_name: dogs_db image: postgres environment: POSTGRES_DB: postgres POSTGRES_USER: postgres POSTGRES_PASSWORD: postgres ports: - '5432:5432' volumes: - ./dbs/postgres-data:/var/lib/postgresql pgadmin: container_name: pg_admin4 image: dpage/pgadmin4 environment: PGADMIN_DEFAULT_EMAIL: postgres@user.com PGADMIN_DEFAULT_PASSWORD: postgres ports: - '5050:80' depends_on: - db volumes: pgdata: \u0414\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f postgresql \u0438\u0437\u043c\u0435\u043d\u0438\u043c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0432 settings.py: DATABASES = { 'default': { 'ENGINE': 'django.db.backends.postgresql_psycopg2', 'NAME': 'postgres', 'USER': 'postgres', 'PASSWORD': 'postgres', 'HOST': 'db', 'PORT': '5432', } } \u0421 credentials \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0433\u043e \u0432 compose-\u0444\u0430\u0439\u043b\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043c\u0441\u044f \u043a pgadmin, \u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u043e\u043c\u0443 \u043d\u0430 \u043f\u043e\u0440\u0442\u0435 5050 \u0414\u043e\u0441\u0442\u0443\u043f \u043a \u0411\u0414 \u043f\u043e\u043b\u0443\u0447\u0435\u043d:","title":"1.2 \u041e\u0440\u043a\u0435\u0441\u0442\u0440\u0430\u0446\u0438\u044f"},{"location":"semester2/lab1/1.2_orchestration/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u0432 \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u0435 \u0432\u0441\u0435\u0445 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u0438\u0437 3 \u0438 4 \u0440\u0430\u0431\u043e\u0442\u044b \u0438\u0437 \u043a\u0443\u0440\u0441\u0430 \"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\". \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0411\u0414 Postgres. \u0421 \u043f\u043e\u043f\u043e\u0449\u044c\u044e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043a \u0411\u0414 \u0438\u0437 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0411\u0414 (Valentina DB).","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435:"},{"location":"semester2/lab1/1.2_orchestration/#docker-compose-file","text":"version: '3' services: back: container_name: dogs_back build: ./back command: bash -c \" python3 manage.py makemigrations && python3 manage.py migrate && python3 manage.py runserver 0.0.0.0:8000\"; ports: - '8000:8000' depends_on: - db front: container_name: dogs_front build: ./front/dog_front ports: - '8080:8080' depends_on: - back db: container_name: dogs_db image: postgres environment: POSTGRES_DB: postgres POSTGRES_USER: postgres POSTGRES_PASSWORD: postgres ports: - '5432:5432' volumes: - ./dbs/postgres-data:/var/lib/postgresql pgadmin: container_name: pg_admin4 image: dpage/pgadmin4 environment: PGADMIN_DEFAULT_EMAIL: postgres@user.com PGADMIN_DEFAULT_PASSWORD: postgres ports: - '5050:80' depends_on: - db volumes: pgdata: \u0414\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f postgresql \u0438\u0437\u043c\u0435\u043d\u0438\u043c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0432 settings.py: DATABASES = { 'default': { 'ENGINE': 'django.db.backends.postgresql_psycopg2', 'NAME': 'postgres', 'USER': 'postgres', 'PASSWORD': 'postgres', 'HOST': 'db', 'PORT': '5432', } } \u0421 credentials \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0433\u043e \u0432 compose-\u0444\u0430\u0439\u043b\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043c\u0441\u044f \u043a pgadmin, \u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u043e\u043c\u0443 \u043d\u0430 \u043f\u043e\u0440\u0442\u0435 5050 \u0414\u043e\u0441\u0442\u0443\u043f \u043a \u0411\u0414 \u043f\u043e\u043b\u0443\u0447\u0435\u043d:","title":"Docker-compose file"},{"location":"semester2/lab2/2.1.1_manual_filters/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2.1.1 \u0420\u0435\u0430\u043b\u0438\u0437\u0432\u0430\u0442\u044c \u0432 \u0440\u0443\u0447\u043d\u0443\u044e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b (\u0432 \u0440\u0443\u0447\u043d\u0443\u044e \u0437\u043d\u0430\u0447\u0438\u0442, \u0447\u0442\u043e \u0412\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0432 url \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u0434\u0430\u043b\u0435\u0435 \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0442\u044c \u043c\u0435\u0442\u043e\u0434 list \u0438\u043b\u0438 get_queryset, c \u0446\u0435\u043b\u044c\u044e \u0432\u0437\u044f\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0438\u0437 url-\u0430\u0434\u0440\u0435\u0441\u0430, \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441 \u043d\u0438\u043c\u0438 \u0437\u0430\u043f\u0440\u043e\u0441 \u0438 \u0432\u0435\u0440\u043d\u0443\u0442\u044c responce \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e): \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0438\u0437 url-\u0430\u0434\u0440\u0435\u0441\u0430 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435. (GET, ListAPIView) \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 2 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0438\u0437 url-\u0430\u0434\u0440\u0435\u0441\u0430 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435. (GET, ListAPIView) \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 2 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0438\u0437 url-\u0430\u0434\u0440\u0435\u0441\u0430 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d \u0438 \u043d\u0435\u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435, \u0435\u0441\u043b\u0438 \u043d\u0435 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d. (GET, ListAPIView) \u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b: path('shows_by_year/', ShowsByYearListView.as_view()), path('shows_by_year_type/', ShowsByYearTypeListView.as_view()), path('participants_by_breed_age/', ParticipantsByBreedAgeListView.as_view()) \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0432\u044b\u0441\u0442\u0430\u0432\u043e\u043a \u043f\u043e \u0433\u043e\u0434\u0443: class ShowsByYearListView(generics.ListAPIView): serializer_class = ShowSerializer def get_queryset(self): queryset = Show.objects.all() year = self.request.query_params.get('year') if year: queryset = queryset.filter(year=year) return queryset \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0432\u044b\u0441\u0442\u0430\u0432\u043e\u043a \u043f\u043e \u0433\u043e\u0434\u0443 \u0438 \u0442\u0438\u043f\u0443 \u0432\u044b\u0441\u0442\u0430\u0432\u043e\u043a (\u043c\u043e\u043d\u043e- \u0438 \u043f\u043e\u043b\u0438\u043f\u043e\u0440\u043e\u0434\u043d\u044b\u0435): class ShowsByYearTypeListView(generics.ListAPIView): serializer_class = ShowSerializer def get_queryset(self): queryset = Show.objects.all() year = self.request.query_params.get('year') type_ = self.request.query_params.get('type') print(year, type_) if year and type_: queryset = queryset.filter(year=year, type=type_) return queryset \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u043f\u043e \u043f\u043e\u0440\u043e\u0434\u0435 \u0438 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0443: class ParticipantsByBreedAgeListView(generics.ListAPIView): serializer_class = ParticipantSerializer def get_queryset(self): queryset = Participant.objects.all() user = self.request.user if user.is_authenticated: breed = self.request.query_params.get('breed') age = self.request.query_params.get('age') if breed and age: queryset = queryset.filter(breed=breed, age=age) return queryset","title":"2.1.1 \u0420\u0443\u0447\u043d\u044b\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b"},{"location":"semester2/lab2/2.1.1_manual_filters/#211","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u0432\u0430\u0442\u044c \u0432 \u0440\u0443\u0447\u043d\u0443\u044e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b (\u0432 \u0440\u0443\u0447\u043d\u0443\u044e \u0437\u043d\u0430\u0447\u0438\u0442, \u0447\u0442\u043e \u0412\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0432 url \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u0434\u0430\u043b\u0435\u0435 \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0442\u044c \u043c\u0435\u0442\u043e\u0434 list \u0438\u043b\u0438 get_queryset, c \u0446\u0435\u043b\u044c\u044e \u0432\u0437\u044f\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0438\u0437 url-\u0430\u0434\u0440\u0435\u0441\u0430, \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441 \u043d\u0438\u043c\u0438 \u0437\u0430\u043f\u0440\u043e\u0441 \u0438 \u0432\u0435\u0440\u043d\u0443\u0442\u044c responce \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e): \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0438\u0437 url-\u0430\u0434\u0440\u0435\u0441\u0430 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435. (GET, ListAPIView) \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 2 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0438\u0437 url-\u0430\u0434\u0440\u0435\u0441\u0430 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435. (GET, ListAPIView) \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 2 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0438\u0437 url-\u0430\u0434\u0440\u0435\u0441\u0430 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d \u0438 \u043d\u0435\u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435, \u0435\u0441\u043b\u0438 \u043d\u0435 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d. (GET, ListAPIView)","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2.1.1"},{"location":"semester2/lab2/2.1.1_manual_filters/#_1","text":"path('shows_by_year/', ShowsByYearListView.as_view()), path('shows_by_year_type/', ShowsByYearTypeListView.as_view()), path('participants_by_breed_age/', ParticipantsByBreedAgeListView.as_view())","title":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b:"},{"location":"semester2/lab2/2.1.1_manual_filters/#_2","text":"class ShowsByYearListView(generics.ListAPIView): serializer_class = ShowSerializer def get_queryset(self): queryset = Show.objects.all() year = self.request.query_params.get('year') if year: queryset = queryset.filter(year=year) return queryset","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0432\u044b\u0441\u0442\u0430\u0432\u043e\u043a \u043f\u043e \u0433\u043e\u0434\u0443:"},{"location":"semester2/lab2/2.1.1_manual_filters/#-","text":"class ShowsByYearTypeListView(generics.ListAPIView): serializer_class = ShowSerializer def get_queryset(self): queryset = Show.objects.all() year = self.request.query_params.get('year') type_ = self.request.query_params.get('type') print(year, type_) if year and type_: queryset = queryset.filter(year=year, type=type_) return queryset","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0432\u044b\u0441\u0442\u0430\u0432\u043e\u043a \u043f\u043e \u0433\u043e\u0434\u0443 \u0438 \u0442\u0438\u043f\u0443 \u0432\u044b\u0441\u0442\u0430\u0432\u043e\u043a (\u043c\u043e\u043d\u043e- \u0438 \u043f\u043e\u043b\u0438\u043f\u043e\u0440\u043e\u0434\u043d\u044b\u0435):"},{"location":"semester2/lab2/2.1.1_manual_filters/#_3","text":"class ParticipantsByBreedAgeListView(generics.ListAPIView): serializer_class = ParticipantSerializer def get_queryset(self): queryset = Participant.objects.all() user = self.request.user if user.is_authenticated: breed = self.request.query_params.get('breed') age = self.request.query_params.get('age') if breed and age: queryset = queryset.filter(breed=breed, age=age) return queryset","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u043f\u043e \u043f\u043e\u0440\u043e\u0434\u0435 \u0438 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0443:"},{"location":"semester2/lab2/2.1.2_auto_filters/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2.1.2 \u0420\u0435\u0430\u043b\u0438\u0437\u0432\u0430\u0442\u044c \u0432 \u0440\u0443\u0447\u043d\u0443\u044e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b (\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 django-filters: \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e \u0434\u0430\u0442\u0435, \u043f\u043e\u0438\u0441\u043a, \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u043f\u043e\u043b\u044f\u043c \u0438\u0437 \u0441\u0432\u044f\u0437\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u0446\u0435\u043d, \u0434\u0430\u0442 \u0438\u043b\u0438 \u043a\u0430\u043a\u0438\u0445-\u043b\u0438\u0431\u043e \u0434\u0440\u0443\u0433\u0438\u0445 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u043c django-filters \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043c\u0435\u0442\u043e\u0434\u044b \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'] \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u0430\u043a\u0446\u0438\u043d\u0430\u0446\u0438\u0438: class ParticipantOrderedFilterView(generics.ListAPIView): queryset = Participant.objects.all() serializer_class = ParticipantSerializer filter_backends = (filters.OrderingFilter,) filterset_fields = 'vaccinated' \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0438\u043d\u0433\u043e\u0432 \u043f\u043e \u043f\u043e\u0440\u043e\u0434\u0435 \u0438 \u043f\u043e \u0442\u0438\u043f\u0443 \u0448\u043e\u0443, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0431\u044b\u043b \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u0440\u0438\u043d\u0433: class RingSearchFilterView(generics.ListAPIView): queryset = Ring.objects.all() serializer_class = RingSerializer filter_backends = (filters.SearchFilter,) search_fields = ('breed', 'show__type') \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0443 \u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043a\u0435: class ParticipantAgeRangeFilterView(generics.ListAPIView): queryset = Participant.objects.all() serializer_class = ParticipantSerializer filterset_class = ParticipantAgeRangeFilter class ParticipantAgeRangeFilter(filters.FilterSet): age = filters.RangeFilter() ordering = filters.OrderingFilter( fields=( ('age', 'age'), ) ) class Meta: model = Participant fields = ['age']","title":"2.1.2 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b"},{"location":"semester2/lab2/2.1.2_auto_filters/#212","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u0432\u0430\u0442\u044c \u0432 \u0440\u0443\u0447\u043d\u0443\u044e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b (\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 django-filters: \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e \u0434\u0430\u0442\u0435, \u043f\u043e\u0438\u0441\u043a, \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u043f\u043e\u043b\u044f\u043c \u0438\u0437 \u0441\u0432\u044f\u0437\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u0446\u0435\u043d, \u0434\u0430\u0442 \u0438\u043b\u0438 \u043a\u0430\u043a\u0438\u0445-\u043b\u0438\u0431\u043e \u0434\u0440\u0443\u0433\u0438\u0445 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2.1.2"},{"location":"semester2/lab2/2.1.2_auto_filters/#django-filters","text":"'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend']","title":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u043c django-filters \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043c\u0435\u0442\u043e\u0434\u044b \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e:"},{"location":"semester2/lab2/2.1.2_auto_filters/#_1","text":"class ParticipantOrderedFilterView(generics.ListAPIView): queryset = Participant.objects.all() serializer_class = ParticipantSerializer filter_backends = (filters.OrderingFilter,) filterset_fields = 'vaccinated'","title":"\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u0430\u043a\u0446\u0438\u043d\u0430\u0446\u0438\u0438:"},{"location":"semester2/lab2/2.1.2_auto_filters/#_2","text":"class RingSearchFilterView(generics.ListAPIView): queryset = Ring.objects.all() serializer_class = RingSerializer filter_backends = (filters.SearchFilter,) search_fields = ('breed', 'show__type')","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0438\u043d\u0433\u043e\u0432 \u043f\u043e \u043f\u043e\u0440\u043e\u0434\u0435 \u0438 \u043f\u043e \u0442\u0438\u043f\u0443 \u0448\u043e\u0443, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0431\u044b\u043b \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u0440\u0438\u043d\u0433:"},{"location":"semester2/lab2/2.1.2_auto_filters/#_3","text":"class ParticipantAgeRangeFilterView(generics.ListAPIView): queryset = Participant.objects.all() serializer_class = ParticipantSerializer filterset_class = ParticipantAgeRangeFilter class ParticipantAgeRangeFilter(filters.FilterSet): age = filters.RangeFilter() ordering = filters.OrderingFilter( fields=( ('age', 'age'), ) ) class Meta: model = Participant fields = ['age']","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0443 \u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043a\u0435:"},{"location":"semester2/lab2/2.2.1_pagination/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2.2.1 \u041d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044e \u0434\u043b\u044f \u043b\u044e\u0431\u044b\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u0432 \u0412\u0430\u0448\u0435\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435. \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0443\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e: 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination', 'PAGE_SIZE': 5","title":"2.2.1 \u041f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f"},{"location":"semester2/lab2/2.2.1_pagination/#221","text":"\u041d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044e \u0434\u043b\u044f \u043b\u044e\u0431\u044b\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u0432 \u0412\u0430\u0448\u0435\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2.2.1"},{"location":"semester2/lab2/2.2.1_pagination/#_1","text":"'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination', 'PAGE_SIZE': 5","title":"\u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0443\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e:"},{"location":"semester2/lab2/2.2.2_custom_pagination/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2.2.2 \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u043c\u0435\u0442\u043e\u0434 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0439, \u043a\u0440\u043e\u043c\u0435 \u043e\u0431\u044b\u0447\u043d\u043e\u0433\u043e \u0432\u044b\u0432\u043e\u0434\u0430 \u0432\u0435\u0440\u043d\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0438 \u0438 \u043d\u043e\u043c\u0435\u0440 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u041a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0438: from rest_framework import pagination from rest_framework.response import Response class CustomPagination(pagination.PageNumberPagination): def get_paginated_response(self, data): return Response({ 'links': { 'next': self.get_next_link(), 'previous': self.get_previous_link() }, 'count': self.page.paginator.count, 'results': data, 'page_number': self.page.number, 'num_pages': self.page.paginator.num_pages, }) \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0432\u043e \u0432\u044c\u044e \u0441 \u0432\u044b\u0432\u043e\u0434\u043e\u043c \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044e: class ParticipantAgeRangeFilterView(generics.ListAPIView): queryset = Participant.objects.all() serializer_class = ParticipantSerializer filterset_class = ParticipantAgeRangeFilter pagination_class = CustomPagination","title":"2.2.2 \u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u043c\u0430\u044f \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f"},{"location":"semester2/lab2/2.2.2_custom_pagination/#222","text":"\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u043c\u0435\u0442\u043e\u0434 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0439, \u043a\u0440\u043e\u043c\u0435 \u043e\u0431\u044b\u0447\u043d\u043e\u0433\u043e \u0432\u044b\u0432\u043e\u0434\u0430 \u0432\u0435\u0440\u043d\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0438 \u0438 \u043d\u043e\u043c\u0435\u0440 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2.2.2"},{"location":"semester2/lab2/2.2.2_custom_pagination/#_1","text":"from rest_framework import pagination from rest_framework.response import Response class CustomPagination(pagination.PageNumberPagination): def get_paginated_response(self, data): return Response({ 'links': { 'next': self.get_next_link(), 'previous': self.get_previous_link() }, 'count': self.page.paginator.count, 'results': data, 'page_number': self.page.number, 'num_pages': self.page.paginator.num_pages, })","title":"\u041a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0438:"},{"location":"semester2/lab2/2.2.2_custom_pagination/#_2","text":"class ParticipantAgeRangeFilterView(generics.ListAPIView): queryset = Participant.objects.all() serializer_class = ParticipantSerializer filterset_class = ParticipantAgeRangeFilter pagination_class = CustomPagination","title":"\u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0432\u043e \u0432\u044c\u044e \u0441 \u0432\u044b\u0432\u043e\u0434\u043e\u043c \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044e:"},{"location":"semester2/lab2/2.3.1_file_upload_validation/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2.3.1 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0435\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b: \u0415\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0444\u0430\u0439\u043b\u043e\u0432, \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u0432\u043d\u0435\u0448\u043d\u0435\u0433\u043e \u043a\u043b\u044e\u0447\u0430 \u043d\u0430 \u0441\u0432\u044f\u0437\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0438\u043c\u0435\u043d\u0438 \u0438 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0444\u0430\u0439\u043b\u0430 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. \u0415\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0434\u043b\u044f \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0444\u0430\u0439\u043b\u043e\u0432 \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u043d\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u0444\u0430\u0439\u043b\u0430 \u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f \u0444\u0430\u0439\u043b\u043e\u0432. \u041c\u043e\u0434\u0435\u043b\u044c \u0444\u0430\u0439\u043b\u0430 - \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430: def get_upload_path(instance, filename): return f'participant_photo_{instance.participant.id}/{filename}' class ParticipantPhoto(models.Model): participant = models.ForeignKey('Participant', on_delete=models.CASCADE, related_name='participant_photos') file = models.FileField( validators=[validate_file_size, validate_file_type], upload_to=get_upload_path ) file_name = models.CharField(max_length=100, blank=True, null=True) file_size = models.IntegerField(blank=True, null=True) def __str__(self): return f'Photo of {str(self.participant)}' def save(self, *args, **kwargs): self.file_name = self.file.name self.file_size = self.file.size super(ParticipantPhoto, self).save(*args, **kwargs) \u0412\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440\u044b: def validate_file_size(file): MAX_MB = 5 limit = MAX_MB * 1024 * 1024 if file.size > limit: raise ValidationError(f'The file size is more than {MAX_MB} MB.') def validate_file_type(file): photo_extensions = ['image/png', 'image/jpeg'] content_type = magic.from_buffer(file.read(), mime=True) if content_type not in photo_extensions: raise ValidationError(f'Files of type {content_type} are not supported.') \u0421\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440: class ParticipantPhotoSerializer(serializers.ModelSerializer): class Meta: model = ParticipantPhoto fields = ['participant', 'file'] \u0412\u044c\u044e \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430: class ParticipantPhotoCreateView(generics.CreateAPIView): queryset = ParticipantPhoto.objects.all() serializer_class = ParticipantPhotoSerializer \u0412\u044c\u044e \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0444\u0430\u0439\u043b\u043e\u0432: class MultipleParticipantPhotoCreateView(generics.CreateAPIView): queryset = ParticipantPhoto.objects.all() serializer_class = ParticipantPhotoSerializer def post(self, request, *args, **kwargs): files = request.FILES.getlist('file') for file in files: participant_id = request.POST.get('participant') file = ParticipantPhoto( participant=Participant.objects.get(id=participant_id), file=file) file.save() return Response(str(request.data), status=status.HTTP_201_CREATED) \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430: \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0432\u0443\u0445 \u0444\u0430\u0439\u043b\u043e\u0432: \u041e\u0448\u0438\u0431\u043a\u0438:","title":"2.3.1 \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0444\u0430\u0439\u043b\u0430 \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f"},{"location":"semester2/lab2/2.3.1_file_upload_validation/#231","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0435\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b: \u0415\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0444\u0430\u0439\u043b\u043e\u0432, \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u0432\u043d\u0435\u0448\u043d\u0435\u0433\u043e \u043a\u043b\u044e\u0447\u0430 \u043d\u0430 \u0441\u0432\u044f\u0437\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0438\u043c\u0435\u043d\u0438 \u0438 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0444\u0430\u0439\u043b\u0430 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. \u0415\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0434\u043b\u044f \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0444\u0430\u0439\u043b\u043e\u0432 \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u043d\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u0444\u0430\u0439\u043b\u0430 \u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f \u0444\u0430\u0439\u043b\u043e\u0432.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2.3.1"},{"location":"semester2/lab2/2.3.1_file_upload_validation/#-","text":"def get_upload_path(instance, filename): return f'participant_photo_{instance.participant.id}/{filename}' class ParticipantPhoto(models.Model): participant = models.ForeignKey('Participant', on_delete=models.CASCADE, related_name='participant_photos') file = models.FileField( validators=[validate_file_size, validate_file_type], upload_to=get_upload_path ) file_name = models.CharField(max_length=100, blank=True, null=True) file_size = models.IntegerField(blank=True, null=True) def __str__(self): return f'Photo of {str(self.participant)}' def save(self, *args, **kwargs): self.file_name = self.file.name self.file_size = self.file.size super(ParticipantPhoto, self).save(*args, **kwargs)","title":"\u041c\u043e\u0434\u0435\u043b\u044c \u0444\u0430\u0439\u043b\u0430 - \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430:"},{"location":"semester2/lab2/2.3.1_file_upload_validation/#_1","text":"def validate_file_size(file): MAX_MB = 5 limit = MAX_MB * 1024 * 1024 if file.size > limit: raise ValidationError(f'The file size is more than {MAX_MB} MB.') def validate_file_type(file): photo_extensions = ['image/png', 'image/jpeg'] content_type = magic.from_buffer(file.read(), mime=True) if content_type not in photo_extensions: raise ValidationError(f'Files of type {content_type} are not supported.')","title":"\u0412\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440\u044b:"},{"location":"semester2/lab2/2.3.1_file_upload_validation/#_2","text":"class ParticipantPhotoSerializer(serializers.ModelSerializer): class Meta: model = ParticipantPhoto fields = ['participant', 'file']","title":"\u0421\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440:"},{"location":"semester2/lab2/2.3.1_file_upload_validation/#_3","text":"class ParticipantPhotoCreateView(generics.CreateAPIView): queryset = ParticipantPhoto.objects.all() serializer_class = ParticipantPhotoSerializer","title":"\u0412\u044c\u044e \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430:"},{"location":"semester2/lab2/2.3.1_file_upload_validation/#_4","text":"class MultipleParticipantPhotoCreateView(generics.CreateAPIView): queryset = ParticipantPhoto.objects.all() serializer_class = ParticipantPhotoSerializer def post(self, request, *args, **kwargs): files = request.FILES.getlist('file') for file in files: participant_id = request.POST.get('participant') file = ParticipantPhoto( participant=Participant.objects.get(id=participant_id), file=file) file.save() return Response(str(request.data), status=status.HTTP_201_CREATED)","title":"\u0412\u044c\u044e \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0444\u0430\u0439\u043b\u043e\u0432:"},{"location":"semester2/lab2/2.3.1_file_upload_validation/#_5","text":"","title":"\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430:"},{"location":"semester2/lab2/2.3.1_file_upload_validation/#_6","text":"","title":"\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0432\u0443\u0445 \u0444\u0430\u0439\u043b\u043e\u0432:"},{"location":"semester2/lab2/2.3.1_file_upload_validation/#_7","text":"","title":"\u041e\u0448\u0438\u0431\u043a\u0438:"},{"location":"semester2/lab2/2.4.1_signals/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2.4.1 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c 3 \u0441\u0438\u0433\u043d\u0430\u043b\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435: \u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u043b\u043e\u0433\u0438\u043a\u0443, \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u044d\u043a\u0437\u0435\u043c\u0430\u043b\u044f\u0440\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u0430. \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u0435\u0439 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u0432 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043b\u044f \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u0440\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430. \u041f\u0440\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u0432 \u043b\u043e\u0433 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043b\u044e\u0431\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c. \u0414\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0441\u0438\u0433\u043d\u0430\u043b\u043e\u0432 \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e ready \u0432 apps.py: class MainConfig(AppConfig): default_auto_field = 'django.db.models.BigAutoField' name = 'main' def ready(self): from . import signals \u0421\u0438\u0433\u043d\u0430\u043b 1: \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430: @receiver(post_save, sender=Participant) def create_participant(sender, instance, created, **kwargs): if created: print(f'Participant {instance.name} created\\n') \u0421\u0438\u0433\u043d\u0430\u043b 2: \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u0432\u0430\u043a\u0446\u0438\u043d\u0430\u0446\u0438\u0438: \u0412 \u043c\u043e\u0434\u0435\u043b\u044c \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043e \u043f\u043e\u043b\u0435 previous_vaccination @receiver(pre_save, sender=Participant) def update_participant_vaccination(sender, instance, **kwargs): prev_instance = Participant.objects.get(id=instance.id) instance.previous_vaccination = prev_instance.vaccinated print(f'Vaccination info for {instance.name} updated: \\n' f'was: {instance.previous_vaccination}\\n' f'now: {instance.vaccinated}\\n') \u0415\u0441\u043b\u0438 \u043f\u043e\u043c\u0435\u043d\u044f\u0442\u044c \u0434\u0430\u0442\u0443 \u0435\u0449\u0435 \u0440\u0430\u0437: \u0421\u0438\u0433\u043d\u0430\u043b 3: \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430 \u0438 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435: @receiver(pre_delete, sender=Participant) def delete_participant(sender, instance, **kwargs): with open('deleted_participants_log.txt', 'a') as f: f.write(f'Participant {instance.name} deleted\\n')","title":"2.4.1 \u0421\u0438\u0433\u043d\u0430\u043b\u044b"},{"location":"semester2/lab2/2.4.1_signals/#241","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c 3 \u0441\u0438\u0433\u043d\u0430\u043b\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435: \u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u043b\u043e\u0433\u0438\u043a\u0443, \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u044d\u043a\u0437\u0435\u043c\u0430\u043b\u044f\u0440\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u0430. \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u0435\u0439 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u0432 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043b\u044f \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u0440\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430. \u041f\u0440\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u0432 \u043b\u043e\u0433 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043b\u044e\u0431\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2.4.1"},{"location":"semester2/lab2/2.4.1_signals/#ready-appspy","text":"class MainConfig(AppConfig): default_auto_field = 'django.db.models.BigAutoField' name = 'main' def ready(self): from . import signals","title":"\u0414\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0441\u0438\u0433\u043d\u0430\u043b\u043e\u0432 \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e ready \u0432 apps.py:"},{"location":"semester2/lab2/2.4.1_signals/#1","text":"@receiver(post_save, sender=Participant) def create_participant(sender, instance, created, **kwargs): if created: print(f'Participant {instance.name} created\\n')","title":"\u0421\u0438\u0433\u043d\u0430\u043b 1: \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430:"},{"location":"semester2/lab2/2.4.1_signals/#2","text":"\u0412 \u043c\u043e\u0434\u0435\u043b\u044c \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043e \u043f\u043e\u043b\u0435 previous_vaccination @receiver(pre_save, sender=Participant) def update_participant_vaccination(sender, instance, **kwargs): prev_instance = Participant.objects.get(id=instance.id) instance.previous_vaccination = prev_instance.vaccinated print(f'Vaccination info for {instance.name} updated: \\n' f'was: {instance.previous_vaccination}\\n' f'now: {instance.vaccinated}\\n')","title":"\u0421\u0438\u0433\u043d\u0430\u043b 2: \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u0432\u0430\u043a\u0446\u0438\u043d\u0430\u0446\u0438\u0438:"},{"location":"semester2/lab2/2.4.1_signals/#_1","text":"","title":"\u0415\u0441\u043b\u0438 \u043f\u043e\u043c\u0435\u043d\u044f\u0442\u044c \u0434\u0430\u0442\u0443 \u0435\u0449\u0435 \u0440\u0430\u0437:"},{"location":"semester2/lab2/2.4.1_signals/#3","text":"@receiver(pre_delete, sender=Participant) def delete_participant(sender, instance, **kwargs): with open('deleted_participants_log.txt', 'a') as f: f.write(f'Participant {instance.name} deleted\\n')","title":"\u0421\u0438\u0433\u043d\u0430\u043b 3: \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430 \u0438 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435:"},{"location":"semester2/lab3/3.1.1_model_tests/","text":"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 class MedalModelTest(TestCase): @classmethod def setUpTestData(cls): Medal.objects.create( medal='g', ) def test_medal_field_value(self): medal = Medal.objects.get(id=1) self.assertEquals(medal.medal, 'g') \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u044b \u0444\u0443\u043d\u043a\u0446\u0438\u0438 __str__ class GradeModelTest(TestCase): @classmethod def setUpTestData(cls): Participant.objects.create( name='Beck', breed='p', age=5, family='Unknown', vaccinated=datetime.date.today(), owner_data='Unknown', dismissed=False ) Expert.objects.create( name='\u0410\u043b\u0438\u0441\u0430', last_name='\u0423\u0448\u043a\u0438\u043d\u0430', club='Tails' ) Show.objects.create( year=2001, type='mono', ) Ring.objects.create( show=Show.objects.get(year=2001), breed='r' ) Grade.objects.create( participant=Participant.objects.get(id=1), ring=Ring.objects.get(id=1), expert=Expert.objects.get(id=1), final_grade=5 ) def test_grade_string_representation(self): show = Show.objects.get(year=2001) participant = Participant.objects.get(id=1) expert = Expert.objects.get(id=1) ring = Ring.objects.get(id=1) show.participants.add(participant) ring.experts.add(expert) grade = Grade.objects.get(id=1) expected_grade_string_repr = f'{grade.participant.name} ' f'{grade.ring} ' f'{grade.expert}' self.assertEquals(str(grade), expected_grade_string_repr) \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0442\u0438\u043f\u0430 \u043f\u043e\u043b\u044f \u0432 \u043c\u043e\u0434\u0435\u043b\u0438 class ParticipantModelTest(TestCase): @classmethod def setUpTestData(cls): Participant.objects.create( name='Becky', breed='r', age=5, family='Unknown', vaccinated=datetime.date.today(), owner_data='Unknown', dismissed=False ) def test_vaccinated_field_type(self): participant = Participant.objects.get(id=2) vaccinated_field = participant._meta.get_field('vaccinated') self.assertTrue(isinstance(vaccinated_field, DateField))","title":"3.1.1 \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439"},{"location":"semester2/lab3/3.1.1_model_tests/#_1","text":"class MedalModelTest(TestCase): @classmethod def setUpTestData(cls): Medal.objects.create( medal='g', ) def test_medal_field_value(self): medal = Medal.objects.get(id=1) self.assertEquals(medal.medal, 'g')","title":"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438"},{"location":"semester2/lab3/3.1.1_model_tests/#__str__","text":"class GradeModelTest(TestCase): @classmethod def setUpTestData(cls): Participant.objects.create( name='Beck', breed='p', age=5, family='Unknown', vaccinated=datetime.date.today(), owner_data='Unknown', dismissed=False ) Expert.objects.create( name='\u0410\u043b\u0438\u0441\u0430', last_name='\u0423\u0448\u043a\u0438\u043d\u0430', club='Tails' ) Show.objects.create( year=2001, type='mono', ) Ring.objects.create( show=Show.objects.get(year=2001), breed='r' ) Grade.objects.create( participant=Participant.objects.get(id=1), ring=Ring.objects.get(id=1), expert=Expert.objects.get(id=1), final_grade=5 ) def test_grade_string_representation(self): show = Show.objects.get(year=2001) participant = Participant.objects.get(id=1) expert = Expert.objects.get(id=1) ring = Ring.objects.get(id=1) show.participants.add(participant) ring.experts.add(expert) grade = Grade.objects.get(id=1) expected_grade_string_repr = f'{grade.participant.name} ' f'{grade.ring} ' f'{grade.expert}' self.assertEquals(str(grade), expected_grade_string_repr)","title":"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u044b \u0444\u0443\u043d\u043a\u0446\u0438\u0438 __str__"},{"location":"semester2/lab3/3.1.1_model_tests/#_2","text":"class ParticipantModelTest(TestCase): @classmethod def setUpTestData(cls): Participant.objects.create( name='Becky', breed='r', age=5, family='Unknown', vaccinated=datetime.date.today(), owner_data='Unknown', dismissed=False ) def test_vaccinated_field_type(self): participant = Participant.objects.get(id=2) vaccinated_field = participant._meta.get_field('vaccinated') self.assertTrue(isinstance(vaccinated_field, DateField))","title":"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0442\u0438\u043f\u0430 \u043f\u043e\u043b\u044f \u0432 \u043c\u043e\u0434\u0435\u043b\u0438"},{"location":"semester2/lab3/3.1.2_get_tests/","text":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430 \u043f\u043e id class GetParticipantTest(TestCase): @classmethod def setUpTestData(cls): Club.objects.create( id=1, name='Super Club', ) Participant.objects.create( id=1, name='Beck', breed='r', age=5, family='Unknown', previous_vaccination='2021-05-06', vaccinated='2022-05-06', owner_data='Unknown', dismissed=False, club=Club.objects.get(id=1) ) def test_get_participant(self): url = reverse('main:participants', args=['1']) data = { 'id': 1, 'name': 'Beck', 'breed': 'r', 'age': 5, 'family': 'Unknown', 'previous_vaccination': '2021-05-06', 'vaccinated': '2022-05-06', 'owner_data': 'Unknown', 'dismissed': False, 'medals': [], 'rings': [], 'club': 1 } response = self.client.get(url, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data) \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0443 \u0432 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0435 class GetAgeRangeFilteredParticipantsTest(TestCase): @classmethod def setUpTestData(cls): Club.objects.create( id=1, name='Duck' ) Participant.objects.create( id=1, name='Woody', breed='r', age=5, family='Unknown', previous_vaccination='2021-05-06', vaccinated='2022-05-06', owner_data='Unknown', dismissed=False, club=Club.objects.get(id=1) ) Participant.objects.create( id=2, name='Lisa', breed='p', age=8, family='Unknown', previous_vaccination='2021-05-06', vaccinated='2022-05-06', owner_data='Unknown', dismissed=True, club=Club.objects.get(id=1) ) def test_age_range_filter_participants(self): url = reverse('main:participants_age_range') data = { \"count\": 1, \"next\": None, \"previous\": None, \"results\": [ { 'id': 1, 'name': 'Woody', 'breed': 'r', 'age': 5, 'family': 'Unknown', 'previous_vaccination': '2021-05-06', 'vaccinated': '2022-05-06', 'owner_data': 'Unknown', 'dismissed': False, 'medals': [], 'rings': [], 'club': 1 } ] } response = self.client.get(url, {'age_min': '3', 'age_max': '6', 'ordering': 'age' }, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data) \u041f\u043e\u0438\u0441\u043a \u0440\u0438\u043d\u0433\u043e\u0432 \u043f\u043e \u0442\u0438\u043f\u0443 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438 \u0438\u0437 \u0441\u0432\u044f\u0437\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b class SearchRingTest(TestCase): @classmethod def setUpTestData(cls): Club.objects.create( id=1, name='Super Club', ) Participant.objects.create( id=1, name='Peckk', breed='r', age=5, family='Unknown', previous_vaccination='2021-05-06', vaccinated='2022-05-06', owner_data='Unknown', dismissed=False, club=Club.objects.get(id=1) ) Expert.objects.create( id=1, name='\u0410\u043b\u0438\u0441\u0430', last_name='\u0423\u0448\u043a\u0438\u043d\u0430', club='Tails' ) Show.objects.create( year=2001, type='mono' ) Show.objects.create( year=2002, type='poly' ) Ring.objects.create( id=1, show=Show.objects.get(year=2001), breed='p' ) Ring.objects.create( id=2, show=Show.objects.get(year=2002), breed='p' ) Ring.objects.create( id=3, show=Show.objects.get(year=2002), breed='b' ) def test_search_rings(self): ring1 = Ring.objects.get(id=1) ring2 = Ring.objects.get(id=2) ring3 = Ring.objects.get(id=3) expert = Expert.objects.get(id=1) ring1.experts.add(expert) ring2.experts.add(expert) ring3.experts.add(expert) url = reverse('main:search_rings') data = { \"count\": 2, \"next\": None, \"previous\": None, \"results\": [ { 'id': 2, 'show': 2002, 'breed': 'p', 'experts': [1] }, { 'id': 3, 'show': 2002, 'breed': 'b', 'experts': [1] } ] } response = self.client.get(url, {'search': 'poly'}, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data)","title":"3.1.2 \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 GET-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432"},{"location":"semester2/lab3/3.1.2_get_tests/#id","text":"class GetParticipantTest(TestCase): @classmethod def setUpTestData(cls): Club.objects.create( id=1, name='Super Club', ) Participant.objects.create( id=1, name='Beck', breed='r', age=5, family='Unknown', previous_vaccination='2021-05-06', vaccinated='2022-05-06', owner_data='Unknown', dismissed=False, club=Club.objects.get(id=1) ) def test_get_participant(self): url = reverse('main:participants', args=['1']) data = { 'id': 1, 'name': 'Beck', 'breed': 'r', 'age': 5, 'family': 'Unknown', 'previous_vaccination': '2021-05-06', 'vaccinated': '2022-05-06', 'owner_data': 'Unknown', 'dismissed': False, 'medals': [], 'rings': [], 'club': 1 } response = self.client.get(url, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data)","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430 \u043f\u043e id"},{"location":"semester2/lab3/3.1.2_get_tests/#_1","text":"class GetAgeRangeFilteredParticipantsTest(TestCase): @classmethod def setUpTestData(cls): Club.objects.create( id=1, name='Duck' ) Participant.objects.create( id=1, name='Woody', breed='r', age=5, family='Unknown', previous_vaccination='2021-05-06', vaccinated='2022-05-06', owner_data='Unknown', dismissed=False, club=Club.objects.get(id=1) ) Participant.objects.create( id=2, name='Lisa', breed='p', age=8, family='Unknown', previous_vaccination='2021-05-06', vaccinated='2022-05-06', owner_data='Unknown', dismissed=True, club=Club.objects.get(id=1) ) def test_age_range_filter_participants(self): url = reverse('main:participants_age_range') data = { \"count\": 1, \"next\": None, \"previous\": None, \"results\": [ { 'id': 1, 'name': 'Woody', 'breed': 'r', 'age': 5, 'family': 'Unknown', 'previous_vaccination': '2021-05-06', 'vaccinated': '2022-05-06', 'owner_data': 'Unknown', 'dismissed': False, 'medals': [], 'rings': [], 'club': 1 } ] } response = self.client.get(url, {'age_min': '3', 'age_max': '6', 'ordering': 'age' }, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data)","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0443 \u0432 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0435"},{"location":"semester2/lab3/3.1.2_get_tests/#_2","text":"class SearchRingTest(TestCase): @classmethod def setUpTestData(cls): Club.objects.create( id=1, name='Super Club', ) Participant.objects.create( id=1, name='Peckk', breed='r', age=5, family='Unknown', previous_vaccination='2021-05-06', vaccinated='2022-05-06', owner_data='Unknown', dismissed=False, club=Club.objects.get(id=1) ) Expert.objects.create( id=1, name='\u0410\u043b\u0438\u0441\u0430', last_name='\u0423\u0448\u043a\u0438\u043d\u0430', club='Tails' ) Show.objects.create( year=2001, type='mono' ) Show.objects.create( year=2002, type='poly' ) Ring.objects.create( id=1, show=Show.objects.get(year=2001), breed='p' ) Ring.objects.create( id=2, show=Show.objects.get(year=2002), breed='p' ) Ring.objects.create( id=3, show=Show.objects.get(year=2002), breed='b' ) def test_search_rings(self): ring1 = Ring.objects.get(id=1) ring2 = Ring.objects.get(id=2) ring3 = Ring.objects.get(id=3) expert = Expert.objects.get(id=1) ring1.experts.add(expert) ring2.experts.add(expert) ring3.experts.add(expert) url = reverse('main:search_rings') data = { \"count\": 2, \"next\": None, \"previous\": None, \"results\": [ { 'id': 2, 'show': 2002, 'breed': 'p', 'experts': [1] }, { 'id': 3, 'show': 2002, 'breed': 'b', 'experts': [1] } ] } response = self.client.get(url, {'search': 'poly'}, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data)","title":"\u041f\u043e\u0438\u0441\u043a \u0440\u0438\u043d\u0433\u043e\u0432 \u043f\u043e \u0442\u0438\u043f\u0443 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438 \u0438\u0437 \u0441\u0432\u044f\u0437\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b"},{"location":"semester2/lab3/3.1.3_post_tests/","text":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u0435\u0434\u0430\u043b\u0438 class CreateMedalTest(TestCase): def test_create_medal(self): url = reverse('main:create_medal') data = { 'id': 1, 'medal': 'g' } response = self.client.post(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.json(), data) \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430 \u0441\u043e \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u043c - \u041a\u043b\u0443\u0431\u043e\u043c class CreateParticipantTest(TestCase): @classmethod def setUpTestData(cls): Club.objects.create( id=1, name='Duck' ) def test_create_participant(self): url = reverse('main:create_participant') data = { 'id': 1, 'name': 'Meck', 'breed': 'r', 'age': 5, 'family': 'Unknown', 'previous_vaccination': '2021-05-06', 'vaccinated': '2022-05-06', 'owner_data': 'Unknown', 'dismissed': False, 'medals': [], 'rings': [], 'club': 1 } response = self.client.post(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.json(), data) \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0446\u0435\u043d\u043a\u0438 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430 \u043d\u0430 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u0440\u0438\u043d\u0433\u0435 \u043e\u0442 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430 (\u0420\u0438\u043d\u0433 \u0441\u0432\u044f\u0437\u0430\u043d \u0441 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u043e\u0439) class CreateGradeTest(TestCase): @classmethod def setUpTestData(cls): Participant.objects.create( id=1, name='Geck', breed='p', age=5, family='Unknown', vaccinated='2022-06-05', owner_data='Unknown', dismissed=False ) Expert.objects.create( id=1, name='\u0410\u043b\u0438\u0441\u0430', last_name='\u0423\u0448\u043a\u0438\u043d\u0430', club='Tails' ) Show.objects.create( year=2001, type='mono', ) Ring.objects.create( id=1, show=Show.objects.get(year=2001), breed='r' ) Grade.objects.create( id=2, participant=Participant.objects.get(id=1), ring=Ring.objects.get(id=1), expert=Expert.objects.get(id=1), final_grade=5 ) def test_create_grade(self): url = reverse('main:create_grade') show = Show.objects.get(year=2001) participant = Participant.objects.get(id=1) expert = Expert.objects.get(id=1) ring = Ring.objects.get(id=1) show.participants.add(participant) ring.experts.add(expert) data = { 'id': 1, 'participant': 1, 'ring': 1, 'expert': 1, 'final_grade': 5 } response = self.client.post(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.json(), data)","title":"3.1.3 \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 POST-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432"},{"location":"semester2/lab3/3.1.3_post_tests/#_1","text":"class CreateMedalTest(TestCase): def test_create_medal(self): url = reverse('main:create_medal') data = { 'id': 1, 'medal': 'g' } response = self.client.post(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.json(), data)","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u0435\u0434\u0430\u043b\u0438"},{"location":"semester2/lab3/3.1.3_post_tests/#-","text":"class CreateParticipantTest(TestCase): @classmethod def setUpTestData(cls): Club.objects.create( id=1, name='Duck' ) def test_create_participant(self): url = reverse('main:create_participant') data = { 'id': 1, 'name': 'Meck', 'breed': 'r', 'age': 5, 'family': 'Unknown', 'previous_vaccination': '2021-05-06', 'vaccinated': '2022-05-06', 'owner_data': 'Unknown', 'dismissed': False, 'medals': [], 'rings': [], 'club': 1 } response = self.client.post(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.json(), data)","title":"\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430 \u0441\u043e \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u043c - \u041a\u043b\u0443\u0431\u043e\u043c"},{"location":"semester2/lab3/3.1.3_post_tests/#_2","text":"","title":"\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0446\u0435\u043d\u043a\u0438 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430 \u043d\u0430 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u0440\u0438\u043d\u0433\u0435 \u043e\u0442 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430"},{"location":"semester2/lab3/3.1.3_post_tests/#_3","text":"class CreateGradeTest(TestCase): @classmethod def setUpTestData(cls): Participant.objects.create( id=1, name='Geck', breed='p', age=5, family='Unknown', vaccinated='2022-06-05', owner_data='Unknown', dismissed=False ) Expert.objects.create( id=1, name='\u0410\u043b\u0438\u0441\u0430', last_name='\u0423\u0448\u043a\u0438\u043d\u0430', club='Tails' ) Show.objects.create( year=2001, type='mono', ) Ring.objects.create( id=1, show=Show.objects.get(year=2001), breed='r' ) Grade.objects.create( id=2, participant=Participant.objects.get(id=1), ring=Ring.objects.get(id=1), expert=Expert.objects.get(id=1), final_grade=5 ) def test_create_grade(self): url = reverse('main:create_grade') show = Show.objects.get(year=2001) participant = Participant.objects.get(id=1) expert = Expert.objects.get(id=1) ring = Ring.objects.get(id=1) show.participants.add(participant) ring.experts.add(expert) data = { 'id': 1, 'participant': 1, 'ring': 1, 'expert': 1, 'final_grade': 5 } response = self.client.post(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.json(), data)","title":"(\u0420\u0438\u043d\u0433 \u0441\u0432\u044f\u0437\u0430\u043d \u0441 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u043e\u0439)"},{"location":"semester2/lab3/3.1.4_put_tests/","text":"\u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u043b\u0443\u0431\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u044d\u043a\u0441\u043f\u0435\u0440\u0442 class UpdateExpertClubTest(TestCase): @classmethod def setUpTestData(cls): Expert.objects.create( id=1, name='\u0410\u043b\u0438\u0441\u0430', last_name='\u0423\u0448\u043a\u0438\u043d\u0430', club='Tails', ring=None ) def test_update_club(self): get_url = reverse('main:experts', args=['1']) put_url = reverse('main:update_expert', args=['1']) data = { 'id': 1, 'name': '\u0410\u043b\u0438\u0441\u0430', 'last_name': '\u0423\u0448\u043a\u0438\u043d\u0430', 'club': 'Tails', 'ring': None } current_data = self.client.get(get_url, format='json') self.assertEqual(current_data.status_code, status.HTTP_200_OK) self.assertEqual(current_data.json(), data) data['club'] = 'Royal' self.client.put(put_url, data, content_type='application/json') changed_data = self.client.get(get_url, format='json') self.assertEqual(changed_data.status_code, status.HTTP_200_OK) self.assertEqual(changed_data.json(), data) \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u0442\u044b \u0432\u0430\u043a\u0446\u0438\u043d\u0430\u0446\u0438\u0438. \u0421\u0438\u0433\u043d\u0430\u043b \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0443\u044e \u0434\u0430\u0442\u0443, \u044d\u0442\u043e \u0442\u0430\u043a\u0436\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f class UpdateVaccinationTest(TestCase): @classmethod def setUpTestData(cls): Club.objects.create( id=1, name='Duck' ) Participant.objects.create( id=1, name='Veck', breed='r', age=5, family='Unknown', previous_vaccination='2021-05-06', vaccinated='2022-05-06', owner_data='Unknown', dismissed=False, club=Club.objects.get(id=1) ) def test_update_vaccination(self): get_url = reverse('main:participants', args=['1']) put_url = reverse('main:update_vaccination', args=['1']) data = { 'id': 1, 'name': 'Veck', 'breed': 'r', 'age': 5, 'family': 'Unknown', 'previous_vaccination': '2021-05-06', 'vaccinated': '2022-05-06', 'owner_data': 'Unknown', 'dismissed': False, 'medals': [], 'rings': [], 'club': 1 } current_data = self.client.get(get_url, format='json') self.assertEqual(current_data.status_code, status.HTTP_200_OK) self.assertEqual(current_data.json(), data) data['vaccinated'] = '2023-05-06' data['previous_vaccination'] = '2022-05-06' self.client.put(put_url, data, content_type='application/json') changed_data = self.client.get(get_url, format='json') self.assertEqual(changed_data.status_code, status.HTTP_200_OK) self.assertEqual(changed_data.json(), data) \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0440\u0438\u043d\u0433\u0430 (\u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0438\u0437 \u0441\u0432\u044f\u0437\u043d\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430), \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u043b \u044d\u043a\u0441\u043f\u0435\u0440\u0442 class UpdateExpertRingTest(TestCase): @classmethod def setUpTestData(cls): Show.objects.create( year=2001, type='mono', ) Ring.objects.create( id=1, show=Show.objects.get(year=2001), breed='r' ) Ring.objects.create( id=2, show=Show.objects.get(year=2001), breed='p' ) Expert.objects.create( id=1, name='\u0410\u043b\u0438\u0441\u0430', last_name='\u0423\u0448\u043a\u0438\u043d\u0430', club='Tails', ring=Ring.objects.get(id=1) ) def test_update_ring(self): get_url = reverse('main:experts', args=['1']) put_url = reverse('main:update_expert', args=['1']) data = { 'id': 1, 'name': '\u0410\u043b\u0438\u0441\u0430', 'last_name': '\u0423\u0448\u043a\u0438\u043d\u0430', 'club': 'Tails', 'ring': 1 } current_data = self.client.get(get_url, format='json') self.assertEqual(current_data.status_code, status.HTTP_200_OK) self.assertEqual(current_data.json(), data) data['ring'] = 2 self.client.put(put_url, data, content_type='application/json') changed_data = self.client.get(get_url, format='json') self.assertEqual(changed_data.status_code, status.HTTP_200_OK) self.assertEqual(changed_data.json(), data)","title":"3.1.4 \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 PUT-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432"},{"location":"semester2/lab3/3.1.4_put_tests/#_1","text":"class UpdateExpertClubTest(TestCase): @classmethod def setUpTestData(cls): Expert.objects.create( id=1, name='\u0410\u043b\u0438\u0441\u0430', last_name='\u0423\u0448\u043a\u0438\u043d\u0430', club='Tails', ring=None ) def test_update_club(self): get_url = reverse('main:experts', args=['1']) put_url = reverse('main:update_expert', args=['1']) data = { 'id': 1, 'name': '\u0410\u043b\u0438\u0441\u0430', 'last_name': '\u0423\u0448\u043a\u0438\u043d\u0430', 'club': 'Tails', 'ring': None } current_data = self.client.get(get_url, format='json') self.assertEqual(current_data.status_code, status.HTTP_200_OK) self.assertEqual(current_data.json(), data) data['club'] = 'Royal' self.client.put(put_url, data, content_type='application/json') changed_data = self.client.get(get_url, format='json') self.assertEqual(changed_data.status_code, status.HTTP_200_OK) self.assertEqual(changed_data.json(), data)","title":"\u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u043b\u0443\u0431\u0430,  \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u044d\u043a\u0441\u043f\u0435\u0440\u0442"},{"location":"semester2/lab3/3.1.4_put_tests/#_2","text":"class UpdateVaccinationTest(TestCase): @classmethod def setUpTestData(cls): Club.objects.create( id=1, name='Duck' ) Participant.objects.create( id=1, name='Veck', breed='r', age=5, family='Unknown', previous_vaccination='2021-05-06', vaccinated='2022-05-06', owner_data='Unknown', dismissed=False, club=Club.objects.get(id=1) ) def test_update_vaccination(self): get_url = reverse('main:participants', args=['1']) put_url = reverse('main:update_vaccination', args=['1']) data = { 'id': 1, 'name': 'Veck', 'breed': 'r', 'age': 5, 'family': 'Unknown', 'previous_vaccination': '2021-05-06', 'vaccinated': '2022-05-06', 'owner_data': 'Unknown', 'dismissed': False, 'medals': [], 'rings': [], 'club': 1 } current_data = self.client.get(get_url, format='json') self.assertEqual(current_data.status_code, status.HTTP_200_OK) self.assertEqual(current_data.json(), data) data['vaccinated'] = '2023-05-06' data['previous_vaccination'] = '2022-05-06' self.client.put(put_url, data, content_type='application/json') changed_data = self.client.get(get_url, format='json') self.assertEqual(changed_data.status_code, status.HTTP_200_OK) self.assertEqual(changed_data.json(), data)","title":"\u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u0442\u044b \u0432\u0430\u043a\u0446\u0438\u043d\u0430\u0446\u0438\u0438. \u0421\u0438\u0433\u043d\u0430\u043b \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0443\u044e \u0434\u0430\u0442\u0443, \u044d\u0442\u043e \u0442\u0430\u043a\u0436\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f"},{"location":"semester2/lab3/3.1.4_put_tests/#_3","text":"class UpdateExpertRingTest(TestCase): @classmethod def setUpTestData(cls): Show.objects.create( year=2001, type='mono', ) Ring.objects.create( id=1, show=Show.objects.get(year=2001), breed='r' ) Ring.objects.create( id=2, show=Show.objects.get(year=2001), breed='p' ) Expert.objects.create( id=1, name='\u0410\u043b\u0438\u0441\u0430', last_name='\u0423\u0448\u043a\u0438\u043d\u0430', club='Tails', ring=Ring.objects.get(id=1) ) def test_update_ring(self): get_url = reverse('main:experts', args=['1']) put_url = reverse('main:update_expert', args=['1']) data = { 'id': 1, 'name': '\u0410\u043b\u0438\u0441\u0430', 'last_name': '\u0423\u0448\u043a\u0438\u043d\u0430', 'club': 'Tails', 'ring': 1 } current_data = self.client.get(get_url, format='json') self.assertEqual(current_data.status_code, status.HTTP_200_OK) self.assertEqual(current_data.json(), data) data['ring'] = 2 self.client.put(put_url, data, content_type='application/json') changed_data = self.client.get(get_url, format='json') self.assertEqual(changed_data.status_code, status.HTTP_200_OK) self.assertEqual(changed_data.json(), data)","title":"\u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0440\u0438\u043d\u0433\u0430 (\u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0438\u0437 \u0441\u0432\u044f\u0437\u043d\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430), \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u043b \u044d\u043a\u0441\u043f\u0435\u0440\u0442"},{"location":"semester2/lab4/4.1.1_filters_interface/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0444\u0438\u043b\u044c\u0442\u0440\u044b \u0438\u0437 \u0432\u0442\u043e\u0440\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439. \u0412 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0435 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f. \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c. \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0441 \u0447\u0435\u043a\u0431\u043e\u043a\u0441\u0430\u043c\u0438. \u0444\u0438\u0442\u0440\u044b \u043d\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d. \u041f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u0441 \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430\u043c\u0438: \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u043d\u043e\u043c\u0443 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0443: \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u0430\u043a\u0446\u0438\u043d\u0430\u0446\u0438\u0438: \u041f\u043e\u0438\u0441\u043a \u043f\u043e \u0440\u0438\u043d\u0433\u0430\u043c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 (\u043f\u043e\u0440\u043e\u0434\u0430, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u0430\u044f \u043d\u0430 \u0440\u0438\u043d\u0433\u0435, \u0438 \u0442\u0438\u043f \u0448\u043e\u0443):","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f"},{"location":"semester2/lab4/4.1.1_filters_interface/#4","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0444\u0438\u043b\u044c\u0442\u0440\u044b \u0438\u0437 \u0432\u0442\u043e\u0440\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439. \u0412 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0435 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f. \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c. \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0441 \u0447\u0435\u043a\u0431\u043e\u043a\u0441\u0430\u043c\u0438. \u0444\u0438\u0442\u0440\u044b \u043d\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4"},{"location":"semester2/lab4/4.1.1_filters_interface/#_1","text":"","title":"\u041f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u0441 \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430\u043c\u0438:"},{"location":"semester2/lab4/4.1.1_filters_interface/#_2","text":"","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u043d\u043e\u043c\u0443 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0443:"},{"location":"semester2/lab4/4.1.1_filters_interface/#_3","text":"","title":"\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u0430\u043a\u0446\u0438\u043d\u0430\u0446\u0438\u0438:"},{"location":"semester2/lab4/4.1.1_filters_interface/#_4","text":"","title":"\u041f\u043e\u0438\u0441\u043a \u043f\u043e \u0440\u0438\u043d\u0433\u0430\u043c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 (\u043f\u043e\u0440\u043e\u0434\u0430, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u0430\u044f \u043d\u0430 \u0440\u0438\u043d\u0433\u0435, \u0438 \u0442\u0438\u043f \u0448\u043e\u0443):"},{"location":"semester2/lab4/4.1.2_filters_interface/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0444\u0438\u043b\u044c\u0442\u0440\u044b \u0438\u0437 \u0432\u0442\u043e\u0440\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439. \u0412 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0435 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f. \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c. \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0441 \u0447\u0435\u043a\u0431\u043e\u043a\u0441\u0430\u043c\u0438. \u0444\u0438\u0442\u0440\u044b \u043d\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d. \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u0430\u043a\u0446\u0438\u043d\u0430\u0446\u0438\u0438: \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u043d\u043e\u043c\u0443 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0443: \u041f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u0441 \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430\u043c\u0438: \u041f\u043e\u0438\u0441\u043a \u043f\u043e \u0440\u0438\u043d\u0433\u0430\u043c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 (\u043f\u043e\u0440\u043e\u0434\u0430, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u0430\u044f \u043d\u0430 \u0440\u0438\u043d\u0433\u0435, \u0438 \u0442\u0438\u043f \u0448\u043e\u0443):","title":"4.1.2 filters interface"},{"location":"semester2/lab4/4.1.2_filters_interface/#4","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0444\u0438\u043b\u044c\u0442\u0440\u044b \u0438\u0437 \u0432\u0442\u043e\u0440\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439. \u0412 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0435 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f. \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c. \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0441 \u0447\u0435\u043a\u0431\u043e\u043a\u0441\u0430\u043c\u0438. \u0444\u0438\u0442\u0440\u044b \u043d\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4"},{"location":"semester2/lab4/4.1.2_filters_interface/#_1","text":"","title":"\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u0430\u043a\u0446\u0438\u043d\u0430\u0446\u0438\u0438:"},{"location":"semester2/lab4/4.1.2_filters_interface/#_2","text":"","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u043d\u043e\u043c\u0443 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0443:"},{"location":"semester2/lab4/4.1.2_filters_interface/#_3","text":"","title":"\u041f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u0441 \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430\u043c\u0438:"},{"location":"semester2/lab4/4.1.2_filters_interface/#_4","text":"","title":"\u041f\u043e\u0438\u0441\u043a \u043f\u043e \u0440\u0438\u043d\u0433\u0430\u043c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 (\u043f\u043e\u0440\u043e\u0434\u0430, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u0430\u044f \u043d\u0430 \u0440\u0438\u043d\u0433\u0435, \u0438 \u0442\u0438\u043f \u0448\u043e\u0443):"}]}